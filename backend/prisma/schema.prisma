// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int @id @default(autoincrement())
  name     String
  cpf      String @unique
  email    String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  carrinhoItens CarrinhoItem[]
  pedidos      Pedido[]
}

model Produto {
  id          Int       @id @default(autoincrement())
  titulo      String
  descricao   String
  preco       Float
  imagemUrl   String
  disponivel  Boolean   @default(true)
  categoriaId Int
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos
  carrinhoItens CarrinhoItem[]
  pedidoItens   PedidoItem[]
}

model Categoria {
  id          Int       @id @default(autoincrement())
  nome        String
  descricao   String
  slug        String    @unique
  icone       String?
  produtos    Produto[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo para itens do carrinho
model CarrinhoItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  produtoId Int
  quantidade Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, produtoId])
}

// Modelo para pedidos
model Pedido {
  id          Int      @id @default(autoincrement())
  userId      Int
  status      String   @default("PENDENTE") // PENDENTE, APROVADO, CANCELADO, ENTREGUE
  total       Float
  endereco    String
  telefone    String
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pedidoItens PedidoItem[]
}

// Modelo para itens do pedido
model PedidoItem {
  id        Int      @id @default(autoincrement())
  pedidoId  Int
  produtoId Int
  quantidade Int
  precoUnitario Float
  createdAt DateTime @default(now())
  
  // Relacionamentos
  pedido  Pedido  @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  produto Produto @relation(fields: [produtoId], references: [id])
}